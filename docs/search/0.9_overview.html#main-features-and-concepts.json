{"objectID":"0.9_overview.html#main-features-and-concepts","parent":"0.9_overview.html","pageViews":0,"url":"https://kotlin.github.io/dataframe///overview.html#main-features-and-concepts","version":"0.9","product":"","headings":"Main Features and Concepts","content":"Hierarchical — Kotlin Dataframe is able to read and present data from different sources including not only plain CSV but also JSON . That’s why it has been designed hierarchical and allows nesting of columns and cells. Interoperable — hierarchical data layout also opens a possibility of converting any objects structure in application memory to a data frame and vice versa. Safe — Kotlin Dataframe provides a mechanism of on-the-fly generation of extension properties that correspond to the columns of frame. In interactive notebooks like Jupyter or Datalore, the generation runs after each cell execution. In IntelliJ IDEA there\u0027s a Gradle plugin for generation properties based on CSV and Json. Also, we’re working on a compiler plugin that infers and transforms data frame schema while typing. The generated properties ensures you’ll never misspell column name and don’t mess up with its type, and of course nullability is also preserved. Polymorphic — if all columns of dataframe are presented in some other dataframe, then the first one could be a superclass for latter. Thus, one can define a function on an interface with some set of columns and then execute it in a safe way on any dataframe which contains this set of columns. Immutable — all operations on DataFrame produce new instance, while underlying data is reused everywhere it\u0027s possible","pageTitle":"Overview","metaDescription":"","type":"Documentation","breadcrumbs":""}